# This sets up a live NAV development environment in Docker containers.  This
# is NOT SUITABLE for production use of NAV.  For more production-oriented
# containerization, have a look at the separate project
# https://github.com/Uninett/nav-container
#
services:
  nav:
    build:
      context: .
      args:
        UID: $UID
        GID: $GID
    environment:
      - NONAVSTART=0  # Set to 1 to disable startup of NAV backend processes when container starts
      - PGHOST=postgres
      - PGDATABASE=nav
      - PGUSER=postgres
    volumes:
      - .:/source
      - nav_config:/etc/nav
      - nav_cache:/tmp/nav_cache
    depends_on:
      - postgres
    restart: on-failure:5

# Uncomment if you want to start a jupyter notebook server to play with the NAV codebase
#  jupyter:
#    build:
#      context: .
#      args:
#        CUSTOM_PIP: jupyter
#    working_dir: /source
#    command: su -c "jupyter-notebook --ip=0.0.0.0" nav
#    ports:
#       - "8888:8888"
#    environment:
#      - NONAVSTART=0  # Set to 1 to disable startup of NAV backend processes when container starts
#      - PGHOST=postgres
#      - PGDATABASE=nav
#      - PGUSER=postgres
#      - PYTHONPATH=/source/python
#    volumes:
#      - .:/source
#      - nav_config:/etc/nav
#    depends_on:
#      - postgres

# Uncomment if you want a second container for group restricted backend services
#  slave:
#    build: .
#    environment:
#      - NONAVSTART=1 # Set to 1 to disable startup of NAV backend processes when container starts
#      - PGHOST=postgres
#      - PGDATABASE=nav
#      - PGUSER=postgres
#    volumes:
#      - .:/source
#      - slave_nav_config:/etc/nav
#    depends_on:
#      - postgres

  web:
    build:
      context: .
      args:
        UID: $UID
        GID: $GID
    command: ["/source/tools/docker/web.sh"]
    ports:
      - "80:8080"
    volumes_from:
      - nav
    depends_on:
      - nav
    restart: on-failure:5

  postgres:
    image: "postgres:13"
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    restart: on-failure:5

  graphite:
    build: ./tools/docker/graphite
    ports:
      - "8000:8000"
    volumes:
      - ./python/nav/etc/graphite/storage-schemas.conf:/etc/carbon/storage-schemas.conf
      - ./python/nav/etc/graphite/storage-aggregation.conf:/etc/carbon/storage-aggregation.conf
    restart: on-failure:5

  # Add a service to continuously rebuild the Sphinx documentation if the doc
  # directory is modified:
  docbuild:
    build:
      context: .
      args:
        UID: $UID
        GID: $GID
    volumes_from:
      - nav
    command: /source/tools/docker/doc-watch.sh
    restart: on-failure:5

volumes:
  nav_config:
    driver: local
  nav_cache:
    driver: local

# Uncomment if you want a second container for group restricted backend services
#  slave_nav_config:
#    driver: local
